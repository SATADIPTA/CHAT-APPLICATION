import java.io.*;
import java.net.*;
class Server
{

    ServerSocket server;
    Socket socket;

    BufferedReader br;
    PrintWriter out;
    //br for reading and out for writing

    //constructor
    public Server()
    {
       try {
           server=new ServerSocket(7777);
           System.out.println("server is ready to accept connection");
           System.out.println("Waiting...");
           socket=server.accept();

           br=new BufferedReader(new InputStreamReader(socket.getInputStream()));
           out=new PrintWriter(socket.getOutputStream());

           startReading();
           startWriting();
       } 
       catch (Exception e) 
       {
           e.printStackTrace();  
       }
    }

    public void startReading()
    {
         // thread- will read and continue giving
        Runnable r1=()->{
           System.out.println("reader started..");
           try{
           while(true)
           { 

                String msg=br.readLine();
                if(msg.equals("exit"))
                {
                    System.out.println("Client terminated the chat");
                    socket.close();
                    break;
                }

                System.out.println("Client : "+msg);
           
           }
        }
        catch(Exception e)
        {
            //e.printStackTrace(e);
            System.out.println("Connection is closed");
        }
       
        };

        new Thread(r1).start();
    }

    public void startWriting()
    {
         //thread- will take data from user and send to client
        Runnable r2=()->{
              System.out.println("writer started...");
              try{
              while(true && !socket.isClosed()) 
              {
                 
            
                     BufferedReader br1=new BufferedReader(new InputStreamReader(System.in));
                     //taking input from console or console means keyboard

                     String content=br1.readLine();
                     
                     out.println(content);
                     out.flush();

                     if(content.equals("exit"))
                     {
                        socket.close();
                        break;
                     }

                 
              }
            }  
            catch (Exception e)
            {
                //e.printStackTrace();
                System.out.println("Connection is closed");
            }
              
        };

        new Thread(r2).start();

    }
    public static void main(String[] args)
    {
        System.out.println("This is server.... going to start server");
        new Server();
    }
}
