import java.awt.*;
import java.io.*;
import java.net.*;
import javax.swing.*;

public class Server {

    private ServerSocket serverSocket;
    private JTextArea textArea;
    private JTextField inputField;
    private PrintWriter out;

    public Server() {
        try {
            // Start the server on port 7777
            serverSocket = new ServerSocket(7777);
            createGUI();
            textArea.append("Server is running...\n");
            while (true) {
                // Accept client connections
                Socket clientSocket = serverSocket.accept();
                textArea.append("New client connected: " + clientSocket + "\n");
                // Handle the client in a new thread
                new ClientHandler(clientSocket).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void createGUI() {
        JFrame frame = new JFrame("Server");
        textArea = new JTextArea();
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);

        inputField = new JTextField();
        JButton sendButton = new JButton("Send");

        sendButton.addActionListener(e -> {
            String message = inputField.getText();
            if (message != null && !message.isEmpty()) {
                textArea.append("Server: " + message + "\n");
                out.println(message);  // Send message to the client
                out.flush();           // Ensure it's sent
                inputField.setText(""); // Clear the input field
                if (message.equalsIgnoreCase("exit")) {
                    try {
                        serverSocket.close(); // Close the server connection
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        frame.setLayout(new BorderLayout());
        frame.add(scrollPane, BorderLayout.CENTER);
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.add(inputField, BorderLayout.CENTER);
        panel.add(sendButton, BorderLayout.EAST);
        frame.add(panel, BorderLayout.SOUTH);

        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private class ClientHandler extends Thread {
        private Socket socket;
        private BufferedReader in;

        public ClientHandler(Socket socket) {
            this.socket = socket;
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void run() {
            try {
                String message;
                while ((message = in.readLine()) != null) {
                    textArea.append("Client: " + message + "\n");
                    if (message.equalsIgnoreCase("exit")) {
                        textArea.append("Client disconnected.\n");
                        break;
                    }
                }
            } catch (IOException e) {
                textArea.append("Connection error.\n");
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        new Server();
    }
}
